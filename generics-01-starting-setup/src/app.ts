const names: Array<string> = []; // string[] 와 일치함
// 제네릭 타입은 다른 타입과 연결된다. 어떤 것과 연결된 것인지는 타스를 통해 알 수 있음

names[0].split(" ");
// 배열 안에 오는 것이 문자열인 것을 알고 있으면 문자열의 함수를 알 수 있음
// 배열에 특정 타입을 지정하면 해당 타입의 함수를 쓸 수 있음

// 프로미스 타입
const promise: Promise<number> = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve(10);
  }, 2000);
});

promise.then((data) => {
  data.split(" ");
});

// 프로미스 타입은 타스에 있는 것은 아니고 자스에 있는 것임
// 프로미스 상수가 프로미스 타입임
// 프로미스 타입도 배열처럼 다른 타입과 함께 사용한다. 프로미스는 다른 타입을 반환하는 것이기 때문
// 위 예시에서 보면은 number를 반환하기 때문에 split 함수는 사용할 수 없다고 에러가 나옴

// 배열은 어떤 타입을 저장하는지, 프로미스는 어떤 타입을 반환하는 지 알 수 있음
// 이는 작업을 수행할 때마다 타스의 도움을 받는 데에 사용된다
// 정보를 미리 아는 데에 사용 할 수 있음!
// 물론 클래스나 함수에 이용하면 다른 기능으로 쓸 수 있다..!
